/******************************************************************************
 *  app.cpp (for LEGO Mindstorms EV3)
 *  Created on: 2015/01/25
 *  Implementation of the Task main_task
 *  Author: Kazuhiro.Kawachi
 *  Copyright (c) 2015 Embedded Technology Software Design Robot Contest
 *****************************************************************************/

#include "app.h"
#include "LineTracer.h"
#include "LineTracerWithStarter.h"

#include "MotorDriver.h"
#include "SensorDriver.h"


#include "TailMotor.h"
#include "BalancingWalker.h"
#include "Sound.h"

#include "Clock.h"

// デストラクタ問題の回避
// https://github.com/ETrobocon/etroboEV3/wiki/problem_and_coping
void *__dso_handle=0;

// using宣言
using ev3api::ColorSensor;
using ev3api::GyroSensor;
using ev3api::Motor;
using ev3api::Clock;

// Device objects
// オブジェクトを静的に確保する
//ColorSensor gColorSensor(PORT_3);
//GyroSensor  gGyroSensor(PORT_4);
//Motor       gLeftWheel(PORT_C);
//Motor       gRightWheel(PORT_B);
// Motor関連
ev3api::Motor gLeftWheel = MotorDriver::getInstance().getLeftWheel();
ev3api::Motor gRightWheel = MotorDriver::getInstance().getRightWheel();
// Sensor関連
ev3api::TouchSensor gTouchSensor = SensorDriver::getInstance().getTouchSensor();
ev3api::ColorSensor gColorSensor = SensorDriver::getInstance().getColorSensor();
ev3api::SonarSensor gSonarSensor = SensorDriver::getInstance().getSonarSensor();
ev3api::GyroSensor gGyroSensor = SensorDriver::getInstance().getGyroSensor();

// オブジェクトの定義
static LineMonitor     *gLineMonitor;
static Balancer        *gBalancer;
static BalancingWalker *gBalancingWalker;
static LineTracer      *gLineTracer;
static Starter			*gStarter;
static Calibration		*gCalibration;
static PidController	*gPidController;
static LineTracerWithStarter *gLineTracerWithStarter;
static MeasureDistance	*gMeasureDistance;
static TailMotor		*gTailMotor;// = TailMotor::getInstance();

//static Garage			*gGarage;
static AttitudeControl	*gAttitudeControl;
static LookUpGate		*gLookUpGate;
static Sound 			*gSound;

static Clock			*gClock;

/**
 * EV3システム生成
 */
static void user_system_create() {
	tslp_tsk(2);
    // オブジェクトの作成
    gBalancer        = new Balancer();
    gBalancingWalker = new BalancingWalker(gGyroSensor,
                                           gLeftWheel,
                                           gRightWheel,
                                           gBalancer);
    gLineMonitor     = new LineMonitor(gColorSensor);
    gStarter         = new Starter(gTouchSensor);
    gPidController   = new PidController();
	gAttitudeControl = new AttitudeControl(gBalancingWalker, gGyroSensor);
	gMeasureDistance = new MeasureDistance(gSonarSensor);
	gLookUpGate      = new LookUpGate(gAttitudeControl,gBalancingWalker,gMeasureDistance, gPidController, gLineMonitor);
    gLineTracer      = new LineTracer(gLineMonitor, gBalancingWalker, gPidController);
    gCalibration     = new Calibration(gColorSensor, gGyroSensor, gLineMonitor);
//	gGarage          = new Garage(gBalancingWalker, gLineTracer, gPidController, gLineMonitor);
    gLineTracerWithStarter = new LineTracerWithStarter(gLineTracer, gStarter, 
    gCalibration, 
//    gRemote, 
	gLookUpGate , gMeasureDistance, 
//	gGarage, 
	gBalancingWalker);
//, gRun_Stairs);
	gTailMotor		= TailMotor::getInstance();
	gSound 			= Sound::getInstance();
	gClock			 = new Clock();

    // 初期化完了通知
    ev3_led_set_color(LED_ORANGE);
    
	gSound->ready();
}

/**
 * EV3システム破棄
 */
static void user_system_destroy() {
    gLeftWheel.reset();
    gRightWheel.reset();

    delete gLineTracerWithStarter;
    delete gLineTracer;
    delete gStarter;
    delete gLineMonitor;
    delete gBalancingWalker;
    delete gBalancer;
    delete gCalibration;
    delete gPidController;

/* 追加 */
    gGyroSensor.reset();
    /* colorとtouchセンサはどうする */
    delete gAttitudeControl;
    delete gMeasureDistance;
    delete gLookUpGate;
//    delete gRemote;
    delete gGarage;
//    delete gRun_Stairs;
//    delete gOdmetry;
//    delete gRunManager;
    delete gTailMotor;
	delete gSound;
	delete gClock;
}

/**
 * トレース実行タイミング
 */
void ev3_cyc_tracer(intptr_t exinf) {
    act_tsk(TRACER_TASK);
}

/**
 * メインタスク
 */
void main_task(intptr_t unused) {
    user_system_create();  // センサやモータの初期化処理

    // 周期ハンドラ開始
    ev3_sta_cyc(EV3_CYC_TRACER);
	ev3_sta_cyc(EV3_CYC_TAILMOTOR);

    slp_tsk();  // バックボタンが押されるまで待つ

    // 周期ハンドラ停止
    ev3_stp_cyc(EV3_CYC_TRACER);
	ev3_stp_cyc(EV3_CYC_TAILMOTOR);

    user_system_destroy();  // 終了処理

    ext_tsk();
}

/**
 * ライントレースタスク
 */
void tracer_task(intptr_t exinf) {
    if (ev3_button_is_pressed(BACK_BUTTON)) {
        wup_tsk(MAIN_TASK);  // バックボタン押下
    } else {
//        gLineTracer->run();  // 倒立走行
        gLineTracerWithStarter->run();  // (倒立)走行
    }

    ext_tsk();
}
/**
 * テールモータ周期タスク
 */
void ev3_cyc_tailmotor(intptr_t exinf) {
	act_tsk(TAILMOTOR_TASK);
}
/**
 * テールモータタスク
 */
void tailmotor_task(intptr_t exinf) {
	if(gLineTracerWithStarter->TailInit == true) {
		gTailMotor->moveTail();	// 尻尾制御
	}
	ext_tsk();
}
